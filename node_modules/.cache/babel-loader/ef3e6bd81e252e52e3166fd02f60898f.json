{"ast":null,"code":"var _jsxFileName = \"/Users/ahmedhafez/Desktop/Beta/face-detection/src/App.js\";\nimport './App.css';\nimport React, { Component } from 'react';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Ranking/Ranking';\nimport Particles from 'react-particles-js'; // import nodejs bindings to native tensorflow,\n// not required, but will speed up things drastically (python required)\n\nimport '@tensorflow/tfjs-node'; // implements nodejs wrappers for HTMLCanvasElement, HTMLImageElement, ImageData\n\nimport * as canvas from 'canvas';\nimport * as faceapi from 'face-api.js'; // patch nodejs environment, we need to provide an implementation of\n// HTMLCanvasElement and HTMLImageElement, additionally an implementation\n// of ImageData is required, in case you want to use the MTCNN\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Canvas,\n  Image,\n  ImageData\n} = canvas;\nfaceapi.env.monkeyPatch({\n  Canvas,\n  Image,\n  ImageData\n});\nconst image = document.getElementById('myImg');\nconst detections = faceapi.detectAllFaces(image); // resize the detected boxes in case your displayed image has a different size then the original\n\nconst detectionsForSize = faceapi.resizeResults(detections, {\n  width: image.width,\n  height: ImageLinkForm.height\n}); // draw them into a canvas\n\ncanvas = document.getElementById('overlay');\ncanvas.width = image.width;\ncanvas.height = image.height;\nconst Polygonparticles = {\n  polygon: {\n    enable: true,\n    type: 'inside',\n    move: {\n      radius: 10\n    }\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.onInputChange = event => {\n      console.log(event.target.value);\n    };\n\n    this.onButtonChange = () => {\n      this.setState({\n        imageUrl: input\n      });\n      faceapi.drawDetection(canvas, detectionsForSize, {\n        withScore: true\n      });\n      console.log(\"click!\");\n    };\n\n    this.state = {\n      input: '',\n      imageUrl: ''\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Particles, {\n        className: \"particles\",\n        params: Polygonparticles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onButtonChange: this.onButtonChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n        imageUrl: this.state.imageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ahmedhafez/Desktop/Beta/face-detection/src/App.js"],"names":["React","Component","Navigation","Logo","ImageLinkForm","Rank","Particles","canvas","faceapi","Canvas","Image","ImageData","env","monkeyPatch","image","document","getElementById","detections","detectAllFaces","detectionsForSize","resizeResults","width","height","Polygonparticles","polygon","enable","type","move","radius","App","constructor","onInputChange","event","console","log","target","value","onButtonChange","setState","imageUrl","input","drawDetection","withScore","state","render"],"mappings":";AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAiBC,SAAjB,QAAkC,OAAlC;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,OAAOC,IAAP,MAAiB,8BAAjB;AACA,OAAOC,SAAP,MAAsB,oBAAtB,C,CACA;AACA;;AACA,OAAO,uBAAP,C,CACA;;AACA,OAAO,KAAKC,MAAZ,MAAwB,QAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,aAAzB,C,CAEA;AACA;AACA;;;AACA,MAAM;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,KAAV;AAAiBC,EAAAA;AAAjB,IAA+BJ,MAArC;AACAC,OAAO,CAACI,GAAR,CAAYC,WAAZ,CAAwB;AAAEJ,EAAAA,MAAF;AAAUC,EAAAA,KAAV;AAAiBC,EAAAA;AAAjB,CAAxB;AAEA,MAAMG,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAd;AACA,MAAMC,UAAU,GAAGT,OAAO,CAACU,cAAR,CAAuBJ,KAAvB,CAAnB,C,CACI;;AACA,MAAMK,iBAAiB,GAAGX,OAAO,CAACY,aAAR,CAAsBH,UAAtB,EAAkC;AAAEI,EAAAA,KAAK,EAAEP,KAAK,CAACO,KAAf;AAAsBC,EAAAA,MAAM,EAAElB,aAAa,CAACkB;AAA5C,CAAlC,CAA1B,C,CACA;;AACAf,MAAM,GAAGQ,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAT;AACAT,MAAM,CAACc,KAAP,GAAeP,KAAK,CAACO,KAArB;AACAd,MAAM,CAACe,MAAP,GAAgBR,KAAK,CAACQ,MAAtB;AAEJ,MAAMC,gBAAgB,GAAG;AACLC,EAAAA,OAAO,EAAE;AACLC,IAAAA,MAAM,EAAE,IADH;AAELC,IAAAA,IAAI,EAAE,QAFD;AAGLC,IAAAA,IAAI,EAAE;AACFC,MAAAA,MAAM,EAAE;AADN;AAHD;AADJ,CAAzB;;AAUA,MAAMC,GAAN,SAAkB5B,SAAlB,CAA4B;AAC1B6B,EAAAA,WAAW,GAAE;AACX;;AADW,SAObC,aAPa,GAOIC,KAAD,IAAW;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,MAAN,CAAaC,KAAzB;AACD,KATY;;AAAA,SAWbC,cAXa,GAWI,MAAM;AACrB,WAAKC,QAAL,CAAc;AAACC,QAAAA,QAAQ,EAAEC;AAAX,OAAd;AACAhC,MAAAA,OAAO,CAACiC,aAAR,CAAsBlC,MAAtB,EAA8BY,iBAA9B,EAAiD;AAAEuB,QAAAA,SAAS,EAAE;AAAb,OAAjD;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD,KAfY;;AAEX,SAAKS,KAAL,GAAa;AACXH,MAAAA,KAAK,EAAG,EADG;AAEXD,MAAAA,QAAQ,EAAE;AAFC,KAAb;AAID;;AAUDK,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACA,QAAC,SAAD;AAAW,QAAA,SAAS,EAAE,WAAtB;AAAkC,QAAA,MAAM,EAAIrB;AAA5C;AAAA;AAAA;AAAA;AAAA,cADA,eAGE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cALF,eAME,QAAC,aAAD;AAAe,QAAA,aAAa,EAAE,KAAKQ,aAAnC;AAAkD,QAAA,cAAc,EAAE,KAAKM;AAAvE;AAAA;AAAA;AAAA;AAAA,cANF,eAOE,QAAC,eAAD;AAAiB,QAAA,QAAQ,EAAE,KAAKM,KAAL,CAAWJ;AAAtC;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAWD;;AA7ByB;;AA+B5B,eAAeV,GAAf","sourcesContent":["import './App.css';\nimport React , { Component } from 'react'; \nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Ranking/Ranking';\nimport Particles from 'react-particles-js';\n// import nodejs bindings to native tensorflow,\n// not required, but will speed up things drastically (python required)\nimport '@tensorflow/tfjs-node';\n// implements nodejs wrappers for HTMLCanvasElement, HTMLImageElement, ImageData\nimport * as canvas from 'canvas';\nimport * as faceapi from 'face-api.js';\n\n// patch nodejs environment, we need to provide an implementation of\n// HTMLCanvasElement and HTMLImageElement, additionally an implementation\n// of ImageData is required, in case you want to use the MTCNN\nconst { Canvas, Image, ImageData } = canvas\nfaceapi.env.monkeyPatch({ Canvas, Image, ImageData });\n\nconst image = document.getElementById('myImg')\nconst detections = faceapi.detectAllFaces(image)\n    // resize the detected boxes in case your displayed image has a different size then the original\n    const detectionsForSize = faceapi.resizeResults(detections, { width: image.width, height: ImageLinkForm.height })\n    // draw them into a canvas\n    canvas = document.getElementById('overlay')\n    canvas.width = image.width\n    canvas.height = image.height\n\nconst Polygonparticles = {\n                    polygon: {\n                        enable: true,\n                        type: 'inside',\n                        move: {\n                            radius: 10\n                        }\n                    }\n                };\n\nclass App extends Component { \n  constructor(){\n    super();\n    this.state = {\n      input : '', \n      imageUrl: ''\n    }\n  }\n  onInputChange = (event) => {\n    console.log(event.target.value); \n  }\n\n  onButtonChange = () => {\n    this.setState({imageUrl: input})\n    faceapi.drawDetection(canvas, detectionsForSize, { withScore: true })\n    console.log(\"click!\");\n  }\n  render() {\n    return (\n      <div className=\"App\">\n      <Particles className= 'particles' params = {Polygonparticles}\n        />\n        <Navigation />\n        <Logo /> \n        <Rank /> \n        <ImageLinkForm onInputChange={this.onInputChange} onButtonChange={this.onButtonChange} /> \n        <FaceRecognition imageUrl={this.state.imageUrl}/>  \n      </div> \n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}